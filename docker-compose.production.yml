#
# Production services configuration for Soundstorm. Adds the `redis` and
# `sidekiq` services, and disables `mailcatcher`. All services in
# production are created using released images from the registry, which
# have been ostensibly verified as working.

version: '3'
services:
  # Use CloudWatch logs in the database
  db:
    logging:
      driver: awslogs
      options:
        awslogs-group: soundstorm
        awslogs-region: us-east-1
        awslogs-stream-prefix: db

  # Use CloudWatch logs for Elasticsearch
  search:
    logging:
      driver: awslogs
      options:
        awslogs-group: soundstorm
        awslogs-region: us-east-1
        awslogs-stream-prefix: search

  # Ephemeral Rails/HTTP cache storage with Redis using LRU cache
  # configuration
  cache:
    image: redis
    command: redis-server /etc/redis/cache.conf
    volumes:
      - redis_cache:/data
      - ./config/redis:/etc/redis
    logging:
      driver: awslogs
      options:
        awslogs-group: soundstorm
        awslogs-region: us-east-1
        awslogs-stream-prefix: cache

  # Background job queue storage with Redis using default configuration
  queue:
    image: redis
    command: redis-server /etc/redis/queue.conf
    volumes:
      - redis_queue:/data
      - ./config/redis:/etc/redis
    logging:
      driver: awslogs
      options:
        awslogs-group: soundstorm
        awslogs-region: us-east-1
        awslogs-stream-prefix: queue

  # Speed up application deployment by launching an image rather than
  # building a full container, such as in development. Dependencies are
  # also preloaded onto the image and the entrypoint script for
  # installing deps is disabled. Migrations still occur in the
  # ENTRYPOINT, however, so as not to depend the entire app on the
  # database being fully up.
  # Build the web application for production by supplying the RAILS_ENV
  # build argument. This will precompile assets onto the image and
  # configure the application for production usage.
  web:
    build:
      context: .
      args:
        - RAILS_ENV=production
        - SECRET_KEY_BASE
    image: weathermen/soundstorm
    depends_on:
      - db
      - cache
      - queue
    environment:
      - SOUNDSTORM_HOST
      - SOUNDSTORM_CDN_URL
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_REGION
      - AWS_S3_BUCKET_NAME
      - DATABASE_URL=postgres://postgres@db:5432
      - REDIS_CACHE_URL=redis://cache:6379
      - REDIS_QUEUE_URL=redis://queue:6379
      - RAILS_SERVE_STATIC_FILES=false
      - RAILS_LOG_TO_STDOUT=true
      - SMTP_HOST
      - SMTP_PORT
      - SMTP_USERNAME
      - SMTP_PASSWORD
      - SMTP_AUTH
      - SMTP_TLS
    logging:
      driver: awslogs
      options:
        awslogs-group: soundstorm
        awslogs-region: us-east-1
        awslogs-stream-prefix: web

  # Background job processor for the application, running background
  # jobs within the Rails context. This container will always use the
  # same image as +web+, ensuring that both services are launched with
  # the same codebase.
  sidekiq:
    image: weathermen/soundstorm
    command: bundle exec sidekiq -C config/sidekiq.yml
    depends_on:
      - db
      - queue
      - web
    environment:
      - SOUNDSTORM_HOST
      - SOUNDSTORM_CDN_URL
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_REGION
      - AWS_S3_BUCKET_NAME
      - DATABASE_URL=postgres://postgres@db:5432
      - REDIS_CACHE_URL=redis://cache:6379
      - REDIS_QUEUE_URL=redis://queue:6379
      - RAILS_SERVE_STATIC_FILES=false
      - RAILS_LOG_TO_STDOUT=true
      - SMTP_HOST
      - SMTP_PORT
      - SMTP_USERNAME
      - SMTP_PASSWORD
      - SMTP_AUTH
      - SMTP_TLS
    logging:
      driver: awslogs
      options:
        awslogs-group: soundstorm
        awslogs-region: us-east-1
        awslogs-stream-prefix: sidekiq

  # Caddy outbound HTTP server for serving static files and terminating SSL.
  # The app is proxied underneath this server so that all requests going
  # to it are over HTTPS. It redirects all :80 requests to :443. This
  # also uses the same image as +web+ so it can share static assets as
  # well as a +Caddyfile+ configuration.
  httpd:
    image: weathermen/soundstorm
    command: caddy --log stdout --agree=true
    depends_on:
      - web
    ports:
      - "80:80"
      - "443:443"
    environment:
      - SOUNDSTORM_HOST
    logging:
      driver: awslogs
      options:
        awslogs-group: soundstorm
        awslogs-region: us-east-1
        awslogs-stream-prefix: httpd

volumes:
  redis_cache:
  redis_queue:
